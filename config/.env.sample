# 日志级别 "fatal" | "error" | "warn" | "info" | "debug" | "trace";
LOG_LEVEL=trace

## 服务信息配置
# API监听的本地ip地址，0.0.0.0表示全部
HOST=0.0.0.0
# API监听的本地端口，通过Docker运行时不建议修改
PORT=5050
# 如果有服务通过内网访问，则需要设置为可以被内网机器访问的IP。不设置则默认与API_HOST一致
PRIVATE_HOST=
# 外部使用什么地址可以访问到。用于一些插件可能需要从外部来访问系统的接口或者资源，无需http前缀。如果外部域名或者ip也要带端口访问，那么也需要单独配置端口。
# 示例 www.yourdomain.com 或者 192.168.0.100
# 如果部署在二级域名下面，可以使用占位符，如 www.yourdomain.com:$port/subpath
PUBLIC_HOST= 
# 如果PUBLIC_HOST留空，会尝试使用ngrok获取一个外部地址映射，如果希望自定义子域名，可以填写在下方。如果自定义子域名已经存在，会创建失败。
# 请提前在ngrok官网申请domain
PUBLIC_TUNNEL_NAME= 
# NGROK的authtoken，从其官网可获取
PUBLIC_TUNNEL_TOKEN= 
# 外网访问的端口，如果留空，SSL下默认443,否则默认80
PUBLIC_PORT= #80
# 0表示非SSL，1表示SSL，默认非SSL
PUBLIC_SSL= 1 #0
PUBLIC_PATH=/public
# api服务使用的授权验证token，如果不提供，则会每次启动随机生成一个
PUBLIC_TOKEN= 
# 是否强制所有服务均需要授权认证。默认0，即false，即根据action注册时候申明的是否需要认证来确定。
# 如果强行开启，则需要注意在各大平台的回调地址配置时，query参数里面带上token={PUBLIC_TOKEN}的信息，否则会回调请求失败
PUBLIC_FORCE_AUTH= 0
## 在线配置服务
# 是否完全使用离线模式，当没有注册可视化配置服务账号时，可以设置为true，以完全本地配置的方式启动，默认为false
OFFLINE=
# 配置服务器的地址，结尾无需带/
CONFIG_SERVER_URL=
# 配置服务器的用户名
CONFIG_SERVER_EMAIL=
# 配置服务器的密码
CONFIG_SERVER_PASSWORD=

## 其他配置
# 缓存REDIS的连接串，不设置则直接缓存到内存
REDIS_URL=
# 用于验证站点归属文件的路径，如 /verify.txt，则访问 {PUBLIC_HOST}/verify.txt时会返回这个文件中的内容（仅支持文本类，如txt，json，html等）
# 配置是相对于{PUBLIC_HOST}目录的路径
VERIFY_FILE= #/102483542.json
SECRETS_FILE=./config/.secrets.json
# 是否开启HTTP请求记录到trace日志，0为关闭，1为开启，默认关闭
TRACE_HTTP_REQUEST=0
# 用于在线安装插件的NPM镜像地址。注意镜像一般有同步时间，刚刚发布的插件如果镜像中还没有，可以去镜像官网手动发起同步请求。
# 留空为https://registry.npmjs.com 除非源站实在太慢，否则不建议更换源。
# 注意如果设置为https://registry.npmmirror.com 等镜像地址，有可能安装的不是最新版本（在线配置平台看到的是最新版本，但是镜像还没同步完成，会安装不到）
NPM_REGISTRY=https://registry.npmmirror.com
# 安装NPM依赖的超时毫秒数，默认30秒
NPM_TIMEOUT=30000
# API插件留存通知的最大条数，超过的会覆盖之前。
PLUGIN_API_MAX_NOTIFY_COUNT=10
# API插件通知有效情况检查频率，默认20秒检查一次
PLUGIN_API_CHECK_NOTIFY_FEQ_SECONDS=20
# API插件通知过期时间，默认1小时
PLUGIN_API_NOTIFY_EXPIRES_SECONDS=3600
SERVER_COMPRESS=1
# 启用压缩的最小尺寸，单位byte，默认10k
SERVER_COMPRESS_MIN_SIZE=10240
# 启用压缩的文件类型
SERVER_COMPRESS_MIME=text/plain,text/html,text/css,application/javascript,application/json
# 本地存储数据库的类型，用于消息存储等。支持sqlite,mysql,pg,mongodb，默认sqlite
DB_PROVIDER=sqlite
# 当使用sqlite时候，指定数据库文件路径，默认./data/chat.db；其他类型数据库填入数据库连接串，如 mysql://user:pass@host:port/dbname
DB_CONNECTION=./data/chat.db
# Minio存储的配置，开启消息存储的时候，如果启用MINIO，则附件会被存储到Minio，否则会被存储到本地data目录的bucket（默认messages）下
MINIO_ENABLE=0
MINIO_ENDPOINT=  # 仅域名或者IP，不带http前缀，不带端口
MINIO_PORT=9000
MINIO_ACCESS_KEY=
MINIO_SECRET_KEY=
MINIO_MESSAGE_BUCKET=messages
MINIO_SSL=1